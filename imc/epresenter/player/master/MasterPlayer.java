package imc.epresenter.player.master;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import java.util.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.border.*;

import imc.epresenter.filesdk.FileResources;
import imc.epresenter.player.*;
import imc.epresenter.player.util.*;
import imc.epresenter.player.audio.*;

/**
 * Provides an interface for a SoundPlayer object.
 *
 */
public class MasterPlayer
implements ActionListener, ChangeListener, SRStreamPlayer, EOFListener
{
   private SoundPlayer soundPlayer_;
   private int startOffset_;
   private TimeFormat formatter_;
   private ArrayList slaveList_;
   private JPanel visualComponent1_, visualComponent2_, visualComponent3_;
   private Coordinator coordinator_;
   
   private boolean started_ = false;
   private boolean scrollDispatched_ = false;
   
   // 8 'Standard Navigation' states:
   // --> see 'Document.java' for more details
   private int[] anNavigationStates_;


   public MasterPlayer()
   {
      // Initialize 'Standard Navigation' states with default values
      anNavigationStates_ = new int[Document.NUMBER_OF_NAVIGATION_STATES];
      for (int i = 0; i < Document.NUMBER_OF_NAVIGATION_STATES; ++i)
         anNavigationStates_[i] = Document.NAV_STATE_ENABLED;
   }

   public void setStartOffset(int millis)
   {
      startOffset_ = millis;
      soundPlayer_.setStartOffset(millis);
   }

   
   public void init(FileResources resources, String[] args, Coordinator c)
   {
      coordinator_ = c;

      String audioLocation = args[0];
      //int offset = Integer.parseInt(args[1]);
      /*
      URL audioURL = null;
      try {
         if (audioLocation.indexOf("//") != -1) audioURL = new URL(audioLocation);
         else audioURL = new File(audioLocation).toURL();
      } catch (MalformedURLException mue) {
         mue.printStackTrace();
      }
      */
      
      try {
         soundPlayer_ = new SoundPlayer(resources, audioLocation, this);
      } catch (Exception e) {
         Manager.showError(Manager.getLocalized("soundError"), Manager.ERROR, e);
         System.exit(1);
      }
      //if (offset != 0) setMediaTime(offset, null);
      
      formatter_ = new TimeFormat();
      
      //System.out.println("Audio duration: "+getDuration());
      
      prepareUI();
      addInfo(Manager.getLocalized("length"), formatter_.format(getDuration()));
      updateUI(getMediaTime());
   }

   
	public void enableVisualComponents(boolean bEnable)
   {
      // not implemented here
   }

   public Component[] getVisualComponents()
   {
      return new Component[] { visualComponent1_, visualComponent2_, visualComponent3_ };
   }

   public String getTitle()
   {
      return "imc ePresentation Player ("+Manager.versionNumber+")";
   }   

   public String getDescription()
   {
      return "Replay of an audio stream.";
   }
   
   public void setStandardNavigationStates(int[] anNavigationStates)
   {
      anNavigationStates_ = anNavigationStates;
   }


   // not from Thread but for replay control
   public void start(EventInfo info)
   {
      //System.out.println("MP: start");
      
      soundPlayer_.start();
      started_ = true;

      
      setButtonImages(startB_, "button_pause");
      startB_.setToolTipText(Manager.getLocalized("stopReplay"));
      
   }
   
   public void pause(EventInfo info)
   {
      //System.out.println("MP: pause");
      if (started_) soundPlayer_.pause();
      started_ = false;
   }
   
   public void stop(EventInfo info)
   {
      //System.out.println("MP: stop");
            
      int millis = getMediaTime();
      soundPlayer_.stop();
      started_ = false;
      if (getMediaTime() > millis+250) 
      {
         setMediaTime(millis, info);
         //coordinator_.requestTime(millis, this);
         
         // Takes too long to stop? This seemed to be an old bug fix.
         // requestTime() lead however to Bug 3811 (Audio does not stop after jump and stopmark)
      }

      
      setButtonImages(startB_, "button_play");
      startB_.setToolTipText(Manager.getLocalized("startReplay"));
      
      if (millis > audioDuration_)
         millis = audioDuration_; // otherwise the FloatSlider throws an
                                  // IllegalArgumentException

      updateUI(millis); // trigger the clock overlay
   }

   public void setMediaTime(int millis, EventInfo info)
   {
      //System.out.println("MP: setMediaTime received ("+millis+")");
      if (info.source != EventInfo.MASTER) 
         soundPlayer_.setMediaTime(millis);
      // MASTER events are continuos sync events for all helpers
      // but they are generated by asking this...
      updateUI(millis);
   }
   
   public  int getMediaTime()
   {
      return soundPlayer_.getMediaTime();
   }
   
   public int getDuration()
   {
      return soundPlayer_.getDuration()-startOffset_;
   }

   public void setDuration(int millis)
   {
   }
   
   public void setInfo(String key, String value)
   {
      if (key.equals("author"))
         addInfo(Manager.getLocalized("author"), value);
      else if (key.equals("title"))
         addInfo(Manager.getLocalized("title"), value);
   }
   
   public void close(EventInfo info)
   {
      //System.out.println("MP: Getting close");
      if (started_) stop(info);
      destroyUI();

      //System.out.println("ccor = null");
      coordinator_ = null;
   }


   //
   // Interface EOFListener
   //
   public void endOfMediaReached()
   {
      coordinator_.informEndOfMediaReached(this);
   }

   
   
   
   //
   // all UI related things
   
   private JButton startB_;
   private JButton vorB_;
   private JButton zurueckB_;
   private JButton endeB_;
   private JButton anfangB_;
   private JButton stillB_;
   private JButton zoomInB_;
   private JButton zoomOutB_;
   private FloatSlider audio_;
   private FloatLabelButton zeit_;
   private FloatSlider scroll_;
   private FloatMinuteDisplay minutes_;
   private ClockOverlay overlay_;
   private JFrame aboutF_;

   private int audioDuration_;
   private boolean isMute_;
   
   
   private void prepareUI()
   {
      audioDuration_ = getDuration()-startOffset_;
      
      Border emptyBorder = BorderFactory.createEmptyBorder();

      // Visual component 1: Background depends on 'navigation states'
      if ((anNavigationStates_[Document.NAV_STANDARDBUTTONS] == Document.NAV_STATE_HIDDEN)
         && (anNavigationStates_[Document.NAV_TIMEDISPLAY] == Document.NAV_STATE_HIDDEN))
      {
         visualComponent1_ = new FixedPicturedPanel(
            createIcon("/imc/epresenter/player/icons2/back_left_nobuttons_notime.gif").getImage());
      }
      else if ((anNavigationStates_[Document.NAV_STANDARDBUTTONS] != Document.NAV_STATE_HIDDEN)
         && (anNavigationStates_[Document.NAV_TIMEDISPLAY] == Document.NAV_STATE_HIDDEN))
      {
         visualComponent1_ = new FixedPicturedPanel(
            createIcon("/imc/epresenter/player/icons2/back_left_notime.gif").getImage());
      }
      else if ((anNavigationStates_[Document.NAV_STANDARDBUTTONS] == Document.NAV_STATE_HIDDEN)
         && (anNavigationStates_[Document.NAV_TIMEDISPLAY] != Document.NAV_STATE_HIDDEN))
      {
         visualComponent1_ = new FixedPicturedPanel(
            createIcon("/imc/epresenter/player/icons2/back_left_nobuttons.gif").getImage());
      }
      else // default: STANDARDBUTTONS visible, TIMEDISPLAY visible
      {
         visualComponent1_ = new FixedPicturedPanel(
            createIcon("/imc/epresenter/player/icons2/back_left.gif").getImage());
      }
      visualComponent1_.setOpaque(false);
      visualComponent1_.setLayout(null);

      startB_ = createButton("button_play",
                           Manager.getLocalized("startReplay"), 65, 9, emptyBorder);
      vorB_ = createButton("button_vorspulen",
                         Manager.getLocalized("nextSlide"), 135, 9, emptyBorder);
      zurueckB_ = createButton("button_zurueckspulen",
                             Manager.getLocalized("prevSlide"), 37, 50, emptyBorder);
      anfangB_ = createButton("button_zurueck",
                          Manager.getLocalized("toBeginning"), 8, 50, emptyBorder);
      endeB_ = createButton("button_vor",
                            Manager.getLocalized("toEnd"), 163, 9, emptyBorder);
      stillB_ = createButton("button_mute",
                           Manager.getLocalized("muteOn"), 252, 50, emptyBorder);
      Icon icon1 = stillB_.getPressedIcon();
      stillB_.setPressedIcon(stillB_.getIcon());
      stillB_.setIcon(icon1);
      audio_ = new FloatSlider(
         createIcon("/imc/epresenter/player/icons2/slider_knob_inactive.gif").getImage(),
         createIcon("/imc/epresenter/player/icons2/slider_knob_over.gif").getImage(),
         createIcon("/imc/epresenter/player/icons2/slider_knob_active.gif").getImage(), 
         null);
      audio_.setBounds(158, 65, 94, audio_.getPreferredSize().height);
      audio_.setValue(0.5f);
      audio_.setChangeListener(this);
      audio_.setToolTipText(Manager.getLocalized("outputGain"));
      //audio_.setBorder(BorderFactory.createLineBorder(Color.black, 1));
      
      zeit_ = new FloatLabelButton(
         "0:00:00",
         createIcon("/imc/epresenter/player/icons2/back_counter.gif").getImage(),
         createIcon("/imc/epresenter/player/icons2/back_counter.gif").getImage(),
         new Insets(4,8,4,8));
      zeit_.setBounds(207,10, zeit_.getPreferredSize().width, zeit_.getPreferredSize().height);
      zeit_.setBorder(emptyBorder);
      zeit_.setForeground(Color.white);
      zeit_.setToolTipText(Manager.getLocalized("actualTime"));
      
      JLabel logo = new JLabel(createIcon("/imc/epresenter/player/icons2/logo_active.gif"));
      logo.setBounds(0,1, logo.getPreferredSize().width, logo.getPreferredSize().height);

      visualComponent1_.add(logo);
      if (anNavigationStates_[Document.NAV_STANDARDBUTTONS] != Document.NAV_STATE_HIDDEN)
      {
         visualComponent1_.add(startB_);
         visualComponent1_.add(vorB_);
         visualComponent1_.add(zurueckB_);
         visualComponent1_.add(endeB_);
         visualComponent1_.add(anfangB_);
      }
      visualComponent1_.add(stillB_);
      visualComponent1_.add(audio_);
      if (anNavigationStates_[Document.NAV_TIMEDISPLAY] != Document.NAV_STATE_HIDDEN) // TIMEDISPLAY visible
         visualComponent1_.add(zeit_);
      




      // Visual component 2: Background depends on 'navigation states'
      if ((anNavigationStates_[Document.NAV_TIMELINE] == Document.NAV_STATE_HIDDEN)
         && (anNavigationStates_[Document.NAV_PLAYERCONFIGBUTTONS] == Document.NAV_STATE_HIDDEN))
      {
         visualComponent2_ = new VariablePicturedPanel(
            createIcon("/imc/epresenter/player/icons2/back_middle_noconfig_notime.gif").getImage(),
            createIcon("/imc/epresenter/player/icons2/back_20px_line_noconfig_notime.gif").getImage(),
            createIcon("/imc/epresenter/player/icons2/back_right_noconfig_notime.gif").getImage());
      }
      else if ((anNavigationStates_[Document.NAV_TIMELINE] != Document.NAV_STATE_HIDDEN)
         && (anNavigationStates_[Document.NAV_PLAYERCONFIGBUTTONS] == Document.NAV_STATE_HIDDEN))
      {
         visualComponent2_ = new VariablePicturedPanel(
            createIcon("/imc/epresenter/player/icons2/back_middle_noconfig.gif").getImage(),
            createIcon("/imc/epresenter/player/icons2/back_20px_line_noconfig.gif").getImage(),
            createIcon("/imc/epresenter/player/icons2/back_right_noconfig.gif").getImage());
      }
      else if ((anNavigationStates_[Document.NAV_TIMELINE] == Document.NAV_STATE_HIDDEN)
         && (anNavigationStates_[Document.NAV_PLAYERCONFIGBUTTONS] != Document.NAV_STATE_HIDDEN))
      {
         visualComponent2_ = new VariablePicturedPanel(
            createIcon("/imc/epresenter/player/icons2/back_middle_notime.gif").getImage(),
            createIcon("/imc/epresenter/player/icons2/back_20px_line_notime.gif").getImage(),
            createIcon("/imc/epresenter/player/icons2/back_right_notime.gif").getImage());
      }
      else // default: TIMELINE visible, PLAYERCONFIGBUTTONS visible
      {
         visualComponent2_ = new VariablePicturedPanel(
            createIcon("/imc/epresenter/player/icons2/back_middle.gif").getImage(),
            createIcon("/imc/epresenter/player/icons2/back_20px_line.gif").getImage(),
            createIcon("/imc/epresenter/player/icons2/back_right.gif").getImage());
      }
      visualComponent2_.setOpaque(false);
      visualComponent2_.setLayout(null);

      if (anNavigationStates_[Document.NAV_TIMELINE] == Document.NAV_STATE_DISABLED)
      {
         scroll_ = new FloatSlider(
            createIcon("/imc/epresenter/player/icons2/slider_knob_inactive.gif").getImage(),
            createIcon("/imc/epresenter/player/icons2/slider_knob_over.gif").getImage(),
            createIcon("/imc/epresenter/player/icons2/slider_knob_active.gif").getImage(), 
            createIcon("/imc/epresenter/player/icons2/slider_knob_not_available.gif").getImage());
      }
      else
      {
         scroll_ = new FloatSlider(
            createIcon("/imc/epresenter/player/icons2/slider_knob_inactive.gif").getImage(),
            createIcon("/imc/epresenter/player/icons2/slider_knob_over.gif").getImage(),
            createIcon("/imc/epresenter/player/icons2/slider_knob_active.gif").getImage(), 
            null);
      }
      scroll_.setBounds(8, 26, 100, scroll_.getPreferredSize().height); // more or less dummies
      scroll_.setChangeListener(this);
      scroll_.setToolTipText(Manager.getLocalized("changeTime"));

      int knobWidth = scroll_.getKnobSize().width;

      //scroll_.setBorder(BorderFactory.createLineBorder(Color.black, 1));
      /*
      JButton video = createButton("icon_video",
                                    "Cowabunga!", 20, 50, emptyBorder);
      JButton thumbs = createButton("icon_thumbs",
                                    "Cowabunga!", 74, 55, emptyBorder);
      JButton main = createButton("icon_main",
                                  "Cowabunga!", 134, 54, emptyBorder);
                                  */
      
      /* feature (and images) not anymore available
      zoomInB_ = createButton("button_zoom_in",
                            Manager.getLocalized("sliderZoomIn"),
                            1200, 0, emptyBorder); // dummies
      zoomInB_.setEnabled(false);
      //zoomInB_.setRolloverEnabled(false);
      //zoomInB_.setPressedIcon(zoomInB_.getIcon());
      zoomOutB_ = createButton("button_zoom_out",
                             Manager.getLocalized("sliderZoomOut"),
                             1200, 50, emptyBorder); // dummies
      zoomOutB_.setEnabled(false);
      //zoomOutB_.setRolloverEnabled(false);
      //zoomOutB_.setPressedIcon(zoomOutB_.getIcon());
      */
      
      minutes_ = new FloatMinuteDisplay(audioDuration_);
      minutes_.setBounds(8+knobWidth/2,10, 100, 12); // more or less dummies
      //minutes_.setBorder(BorderFactory.createLineBorder(Color.black, 1));
      
      if (anNavigationStates_[Document.NAV_TIMELINE] != Document.NAV_STATE_HIDDEN)
         visualComponent2_.add(scroll_);
      /*
      visualComponent2_.add(video);
      visualComponent2_.add(thumbs);
      visualComponent2_.add(main);
       */
      //visualComponent2_.add(zoomInB_);
      //visualComponent2_.add(zoomOutB_);
      if (anNavigationStates_[Document.NAV_TIMELINE] != Document.NAV_STATE_HIDDEN)
         visualComponent2_.add(minutes_);

      // is null layout, so this is useless:
      //visualComponent2_.setMinimumSize(new Dimension(160, 60));


      visualComponent2_.addComponentListener(new ComponentAdapter() {
         public void componentResized(ComponentEvent e)
         {
            int knobWidth = scroll_.getKnobSize().width;

            scroll_.setSize(visualComponent2_.getWidth()-18, scroll_.getPreferredSize().height);
            minutes_.setSize(visualComponent2_.getWidth()-18-knobWidth, minutes_.getSize().height);
            
            /* feature (and buttons) not anymore available
            zoomInB_.setLocation(visualComponent2_.getWidth()-167, 50);
            zoomOutB_.setLocation(visualComponent2_.getWidth()-87, 50);
            if (visualComponent2_.getWidth() < 370)
            {
               zoomInB_.setVisible(false);
               zoomOutB_.setVisible(false);
            }
            else if (!zoomInB_.isVisible())
            {
               zoomInB_.setVisible(true);
               zoomOutB_.setVisible(true);
            }
            */
         }
      });
      

      // Visual component 3
      overlay_ = new ClockOverlay();
      visualComponent3_ = overlay_;
      Dimension dimScreen = Toolkit.getDefaultToolkit().getScreenSize();
      visualComponent3_.setBounds(dimScreen.width-100, dimScreen.height-20, 100, 20);

      //RepaintManager.currentManager(main).setDoubleBufferingEnabled(false);
   }
   
   private void updateUI(int millis)
   {
      millis -= startOffset_;

      if ((anNavigationStates_[Document.NAV_STANDARDBUTTONS] == Document.NAV_STATE_DISABLED)
         && (startB_.isEnabled()))
      {
         startB_.setEnabled(false);
         vorB_.setEnabled(false);
         zurueckB_.setEnabled(false);
         endeB_.setEnabled(false);
         anfangB_.setEnabled(false);
      }

      if (anNavigationStates_[Document.NAV_TIMEDISPLAY] == Document.NAV_STATE_DISABLED)
         zeit_.setText("");
      else 
         zeit_.setText(formatter_.shortFormat(millis));

      scroll_.setValue(millis/(float)audioDuration_);

///      if (anNavigationStates_[Document.NAV_TIMELINE] != Document.NAV_STATE_HIDDEN)
         overlay_.show(millis, started_);
   }

   private void destroyUI() {
      if (aboutF_ != null) showAbout();
   }
   
   public void addInfo(String key, String value) {
      //keypanel.add(new JLabel("<html><i>"+key+"</i></html>"));
      //valuepanel.add(new JLabel("<html>"+value+"</html>"));
      //frame.pack();
   }
   
   private ImageIcon createIcon(String location) {
      URL loc = getClass().getResource(location);
      //if (loc == null) throw new IllegalArgumentException(
      //   "Did not find resource "+location+" for icon loading.");
      if (loc != null)
         return new ImageIcon(loc);
      else
         return null;
   }
   
   // see also LayoutDecember2001
   private JButton createButton(String name, String toolTip, int x, int y, Border border)
   {
      JButton but = new JButton();
      setButtonImages(but, name);
      but.setContentAreaFilled(false);
      but.setBorder(border);
      but.setBounds(new Rectangle(x, y, but.getPreferredSize().width, but.getPreferredSize().height));
      but.setToolTipText(toolTip);
      but.setFocusPainted(false); // do not display blue (half) border after clicked
      but.addActionListener(this);

      return but;
   }

   // see also LayoutDecember2001
   private void setButtonImages(JButton button, String name)
   {
      String prefix = "/imc/epresenter/player/icons2/";
      ImageIcon icon1 = createIcon(prefix+name+"_inactive.gif");
      ImageIcon icon2 = createIcon(prefix+name+"_active.gif");
      ImageIcon icon3 = createIcon(prefix+name+"_over.gif");
      ImageIcon icon4 = createIcon(prefix+name+"_not_available.gif");

      if (icon1 == null) throw new IllegalArgumentException(
         "Did not find resource "+prefix+name+"_inactive.gif for icon loading.");
      button.setIcon(icon1);
      if (icon2 != null)
         button.setPressedIcon(icon2);
      if (icon3 != null)
      {
         if (!button.isRolloverEnabled())
            button.setRolloverEnabled(true);
         button.setRolloverIcon(icon3);
      }
      if (icon4 != null)
      {
         button.setDisabledIcon(icon4);
      }
   
   }
   
   private void showAbout() {
      if (aboutF_ == null) {
         aboutF_ = new JFrame("imc ePresentation Player ("+Manager.versionNumber+")");

         JButton aboutB = new JButton(createIcon("/imc/epresenter/player/about-imc.gif"));
         aboutB.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));
         aboutB.setToolTipText(Manager.getLocalized("closeWindow"));
         JPanel panel = new JPanel(new BorderLayout());
         panel.add("Center", aboutB);

         String buildDate = null;
         try
         {
            InputStream buildFile = getClass().getResourceAsStream(
               "/imc/epresenter/player/buildDate");
            if (buildFile != null)
            {
               BufferedReader br = new BufferedReader(
                  new InputStreamReader(buildFile));
               buildDate = br.readLine();
            }
         }
         catch (IOException e)
         {
         }
         if (buildDate != null && buildDate.length() > 0)
         {
            JLabel buildL = new JLabel("build: "+buildDate, JLabel.CENTER);
            //buildL.setBorder(BorderFactory.createLineBorder(Color.black, 1));
            panel.add("South", buildL);
         }


         aboutF_.setContentPane(panel);
         aboutF_.pack();
         aboutF_.setVisible(true);
         aboutB.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
               showAbout();
            }
         });
         aboutF_.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
               showAbout();
            }
         });
      } else {
         aboutF_.dispose();
         aboutF_.setContentPane(new JPanel());
         aboutF_ = null;
      }
   }
   
   
   public void actionPerformed(ActionEvent ae) {
      
      if (ae.getSource() == startB_)
      {
         if (!started_)
         {
            coordinator_.requestStart(this);
         }
         else
         {
            coordinator_.requestStop(this);
         }
      }
      else if (ae.getSource() == endeB_)
         coordinator_.requestTime(getDuration(), this);
      else if (ae.getSource() == anfangB_)
         coordinator_.requestTime(0,this);
      else if (ae.getSource() == vorB_)
         coordinator_.requestNextSlide(this);
      else if (ae.getSource() == zurueckB_)
         coordinator_.requestPreviousSlide(false, this);
      else if (ae.getSource() == stillB_)
      {
         muteOnOff();
      }
   }
   
   // dies sind nur (von TimeSlider gefillterte) user events
   // die machine events sind ja vom Programm mit setValue
   // erzeugt und muessen nicht beachtet werden
   //long lastSTF = 0;
   public void stateChanged(ChangeEvent ce) {
      if (ce.getSource() == scroll_) {
         
         if (!scrollDispatched_ && scroll_.isValueAdjusting()) {
            coordinator_.requestScrollStart(this);
            scrollDispatched_ = true;
         }
         

         int time = (int)(scroll_.getValue()*audioDuration_);
         time += startOffset_;
         if (time != getMediaTime()) {
            //System.out.println("MP: setMediaTime ("+time+") invoke in stateChanged");
            coordinator_.requestTime(time, this);
            /*
            if (lastSTF+500 < System.currentTimeMillis())
            {
               lastSTF = System.currentTimeMillis();
               try { Thread.sleep(100); } catch (InterruptedException exc) {}
               ((Document)coordinator_).switchToFullScreen(false);
            }
            //*/
         } else {
            //System.out.println("MP: setMediaTime not invoked due to same time stamps ("+time+") in stateChanged");
         }

         // beim Loslassen der Maustaste wird die Wiedergabe
         // wieder gestartet
         
         if (!scroll_.isValueAdjusting() && scrollDispatched_) {
            coordinator_.requestScrollStop(this);
            scrollDispatched_ = false;
         }
      
      } else if (ce.getSource() == audio_) {
         float gainValue = (audio_.getValue()-0.5f)*30; // a range of [-15, 15]
         soundPlayer_.setControlValue("MASTER_GAIN", gainValue);
      }
   }

   public void increaseVolume()
   {
      float volume = audio_.getValue();
      if (volume + .0625f <= 1.0f)
         audio_.setExternalValue(volume + .0625f);
     
   }

   public void decreaseVolume()
   {
      float volume = audio_.getValue();
      if (volume - .0625f >= 0.0f)
         audio_.setExternalValue(volume - .0625f);

   }

   public boolean isMute()
   {
      return isMute_;
   }
   
   public void muteOnOff()
   {
      soundPlayer_.setControlValue("MUTE", isMute_ ? 0.0f : 1.0f);
      if (isMute_)
      {
         Icon icon1 = stillB_.getPressedIcon();
         stillB_.setPressedIcon(stillB_.getIcon());
         stillB_.setIcon(icon1);
         stillB_.setToolTipText(Manager.getLocalized("muteOn"));
      }
      else
      {
         Icon icon1 = stillB_.getPressedIcon();
         stillB_.setPressedIcon(stillB_.getIcon());
         stillB_.setIcon(icon1);
         stillB_.setToolTipText(Manager.getLocalized("muteOff"));
      }
      isMute_ = !isMute_;
      
   }
/*   
   public void disableStandardButtons()
   {
      startB_.setEnabled(false);
      vorB_.setEnabled(false);
      zurueckB_.setEnabled(false);
      endeB_.setEnabled(false);
      anfangB_.setEnabled(false);
   }
   
   public void disableTimeLine()
   {
      zeit_.setText("");
      bEnableTimeLine_ = false;
   }

   public void disableTimeDisplay()
   {
      zeit_.setText("");
      bEnableTimeDisplay_ = false;
   }
*/
}