// SBSDKEventsHandler.cpp : implementation file
//

#include "stdafx.h"
#include "SBSDKEventsHandler.h"

// this header is generated by the midl compiler
#include "SBSDKComWrapper_h.h"

// CSBSDKEventsHandler

IMPLEMENT_DYNAMIC(CSBSDKEventsHandler, CCmdTarget)
CSBSDKEventsHandler::CSBSDKEventsHandler()
{
	m_pIntf = NULL;

	EnableAutomation();
}

CSBSDKEventsHandler::~CSBSDKEventsHandler()
{
}


void CSBSDKEventsHandler::OnFinalRelease()
{
	// When the last reference for an automation object is released
	// OnFinalRelease is called.  The base class will automatically
	// deletes the object.  Add additional cleanup required for your
	// object before calling the base class.

	CCmdTarget::OnFinalRelease();
}


BEGIN_MESSAGE_MAP(CSBSDKEventsHandler, CCmdTarget)
END_MESSAGE_MAP()


BEGIN_DISPATCH_MAP(CSBSDKEventsHandler, CCmdTarget)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnXYDown",1,OnXYDown,VT_EMPTY, VTS_I4 VTS_I4 VTS_I4 VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnXYMove",2,OnXYMove,VT_EMPTY, VTS_I4 VTS_I4 VTS_I4 VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnXYUp",3,OnXYUp,VT_EMPTY, VTS_I4 VTS_I4 VTS_I4 VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnXYNonProjectedDown",4,OnXYNonProjectedDown,VT_EMPTY, VTS_I4 VTS_I4 VTS_I4 VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnXYNonProjectedMove",5,OnXYNonProjectedMove,VT_EMPTY, VTS_I4 VTS_I4 VTS_I4 VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnXYNonProjectedUp",6,OnXYNonProjectedUp,VT_EMPTY, VTS_I4 VTS_I4 VTS_I4 VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnXMLAnnotation",7,OnXMLAnnotation,VT_EMPTY, VTS_WBSTR)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnNoTool",8,OnNoTool,VT_EMPTY, VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnPen",9,OnPen,VT_EMPTY, VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnEraser",10,OnEraser,VT_EMPTY, VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnRectangle",11,OnRectangle,VT_EMPTY, VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnLine",12,OnLine,VT_EMPTY, VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnCircle",13,OnCircle,VT_EMPTY, VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnPrint",14,OnPrint,VT_EMPTY, VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnNext",15,OnNext,VT_EMPTY, VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnPrevious",16,OnPrevious,VT_EMPTY, VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnClear",17,OnClear,VT_EMPTY, VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnBoardStatusChange",18,OnBoardStatusChange,VT_EMPTY, VTS_NONE)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnXMLToolChange",19,OnXMLToolChange,VT_EMPTY, VTS_I4 VTS_WBSTR)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnXYDownRaw",20,OnXYDownRaw,VT_EMPTY, VTS_I4 VTS_I4 VTS_I4 VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnXYMoveRaw",21,OnXYMoveRaw,VT_EMPTY, VTS_I4 VTS_I4 VTS_I4 VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnXYUpRaw",22,OnXYUpRaw,VT_EMPTY, VTS_I4 VTS_I4 VTS_I4 VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnDViTTrackerData",23,OnDViTTrackerData,VT_EMPTY, VTS_I4 VTS_UI1 VTS_UI1 VTS_UI1)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnDViTRawWidthHeight",24,OnDViTRawWidthHeight,VT_EMPTY, VTS_I4 VTS_I4 VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnDViTAspectRatioAndDeltaAngles",25,OnDViTAspectRatioAndDeltaAngles,VT_EMPTY, VTS_I4 VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnDViTMultiPointerMode",26,OnDViTMultiPointerMode,VT_EMPTY, VTS_I4 VTS_BOOL)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnRightMouse",27,OnRightMouse,VT_EMPTY, VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnMiddleMouse",28,OnMiddleMouse,VT_EMPTY, VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnFloatMouse",29,OnFloatMouse,VT_EMPTY, VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnKeyboard",30,OnKeyboard,VT_EMPTY, VTS_I4)
	DISP_FUNCTION_ID(CSBSDKEventsHandler,"OnMouseStateChange",31,OnMouseStateChange,VT_EMPTY, VTS_I4)
END_DISPATCH_MAP()

// Note: we add support for IID_ISBSDKEventsHandler to support typesafe binding
//  from VBA.  This IID must match the GUID that is attached to the 
//  dispinterface in the .IDL file.

// {FE7DFE5D-8389-42E7-8AD6-43C95E5D7B19}
//static const IID IID_ISBSDKEventsHandler =
//{ 0xFE7DFE5D, 0x8389, 0x42E7, { 0x8A, 0xD6, 0x43, 0xC9, 0x5E, 0x5D, 0x7B, 0x19 } };

BEGIN_INTERFACE_MAP(CSBSDKEventsHandler, CCmdTarget)
	//INTERFACE_PART(CSBSDKEventsHandler, IID_ISBSDKEventsHandler, Dispatch)
	INTERFACE_PART(CSBSDKEventsHandler, __uuidof(_ISBSDKBaseClass2Events), Dispatch)
END_INTERFACE_MAP()


void CSBSDKEventsHandler::SetSDKIntf(SBSDKEventIntf *pIntf)
{
	m_pIntf = pIntf;
}

// CSBSDKEventsHandler message handlers
void CSBSDKEventsHandler::OnXYDown(LONG x, LONG y, LONG z, LONG iPointerID)
{
	if (m_pIntf)
	{
		m_pIntf->OnXYDown(x, y, z, iPointerID);
	}
}

void CSBSDKEventsHandler::OnXYMove(LONG x, LONG y, LONG z, LONG iPointerID)
{
	if (m_pIntf)
	{
		m_pIntf->OnXYMove(x, y, z, iPointerID);
	}
}

void CSBSDKEventsHandler::OnXYUp(LONG x, LONG y, LONG z, LONG iPointerID)
{
	if (m_pIntf)
	{
		m_pIntf->OnXYUp(x, y, z, iPointerID);
	}
}

void CSBSDKEventsHandler::OnXYNonProjectedDown(LONG x, LONG y, LONG z, LONG iPointerID)
{
	if (m_pIntf)
	{
		m_pIntf->OnXYNonProjectedDown(x, y, z, iPointerID);
	}
}

void CSBSDKEventsHandler::OnXYNonProjectedMove(LONG x, LONG y, LONG z, LONG iPointerID)
{
	if (m_pIntf)
	{
		m_pIntf->OnXYNonProjectedMove(x, y, z, iPointerID);
	}
}

void CSBSDKEventsHandler::OnXYNonProjectedUp(LONG x, LONG y, LONG z, LONG iPointerID)
{
	if (m_pIntf)
	{
		m_pIntf->OnXYNonProjectedUp(x, y, z, iPointerID);
	}
}

void CSBSDKEventsHandler::OnXMLAnnotation(BSTR bstrXMLAnnotation)
{
	if (m_pIntf)
	{
		m_pIntf->OnXMLAnnotation(bstrXMLAnnotation);
	}
}

void CSBSDKEventsHandler::OnNoTool(LONG iPointerID)
{
	if (m_pIntf)
	{
		m_pIntf->OnNoTool(iPointerID);
	}
}

void CSBSDKEventsHandler::OnPen(LONG iPointerID)
{
	if (m_pIntf)
	{
		m_pIntf->OnPen(iPointerID);
	}
}

void CSBSDKEventsHandler::OnEraser(LONG iPointerID)
{
	if (m_pIntf)
	{
		m_pIntf->OnEraser(iPointerID);
	}
}

void CSBSDKEventsHandler::OnRectangle(LONG iPointerID)
{
	if (m_pIntf)
	{
		m_pIntf->OnRectangle(iPointerID);
	}
}

void CSBSDKEventsHandler::OnLine(LONG iPointerID)
{
	if (m_pIntf)
	{
		m_pIntf->OnLine(iPointerID);
	}
}

void CSBSDKEventsHandler::OnCircle(LONG iPointerID)
{
	if (m_pIntf)
	{
		m_pIntf->OnCircle(iPointerID);
	}
}

void CSBSDKEventsHandler::OnPrint(LONG iPointerID)
{
	if (m_pIntf)
	{
		m_pIntf->OnPrint(iPointerID);
	}
}

void CSBSDKEventsHandler::OnNext(LONG iPointerID)
{
	if (m_pIntf)
	{
		m_pIntf->OnNext(iPointerID);
	}
}

void CSBSDKEventsHandler::OnPrevious(LONG iPointerID)
{
	if (m_pIntf)
	{
		m_pIntf->OnPrevious(iPointerID);
	}
}

void CSBSDKEventsHandler::OnClear(LONG iPointerID)
{
	if (m_pIntf)
	{
		m_pIntf->OnClear(iPointerID);
	}
}

void CSBSDKEventsHandler::OnBoardStatusChange(void)
{
	if (m_pIntf)
	{
		m_pIntf->OnSBSDKBoardStatusChange();
	}
}

void CSBSDKEventsHandler::OnXMLToolChange(LONG iBoardNumber, BSTR bstrXMLTool)
{
	if (m_pIntf)
	{
		m_pIntf->OnXMLToolChange(iBoardNumber, bstrXMLTool);
	}
}

void CSBSDKEventsHandler::OnXYDownRaw(LONG x, LONG y, LONG z, LONG iPointerID)
{
}

void CSBSDKEventsHandler::OnXYMoveRaw(LONG x, LONG y, LONG z, LONG iPointerID)
{
}

void CSBSDKEventsHandler::OnXYUpRaw(LONG x, LONG y, LONG z, LONG iPointerID)
{
}

void CSBSDKEventsHandler::OnDViTTrackerData(LONG iBoardNumber, unsigned char ucData1, unsigned char ucData2, unsigned char ucData3)
{
}

void CSBSDKEventsHandler::OnDViTRawWidthHeight(LONG iWidth, LONG iHeight, LONG iPointerID)
{
}

void CSBSDKEventsHandler::OnDViTAspectRatioAndDeltaAngles(LONG iBoardNumber, double dAspectRatio, double dAngle1, double dAngle2, double dAngle3, double dAngle4)
{
}

void CSBSDKEventsHandler::OnDViTMultiPointerMode(LONG iBoardNumber, VARIANT_BOOL bMultiPointerModeOn)
{
}

void CSBSDKEventsHandler::OnRightMouse(LONG iPointerID)
{
}

void CSBSDKEventsHandler::OnMiddleMouse(LONG iPointerID)
{
}

void CSBSDKEventsHandler::OnFloatMouse(LONG iPointerID)
{
}

void CSBSDKEventsHandler::OnKeyboard(LONG iPointerID)
{
}

void CSBSDKEventsHandler::OnMouseStateChange(SBCSDK_MOUSE_STATE mouseState)
{
}
