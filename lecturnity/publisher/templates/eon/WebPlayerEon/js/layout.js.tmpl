var g_isSliding = false;
var g_wasPlaying = false;

var g_TimeLabel = null;
var g_lastDisplayedTimeMs = -1000;
var g_layoutIgnoreTimeChange = false;

//var g_layoutTimeSlider = null;
//var g_layoutVolumeSlider = null;
var g_layoutCurrentSlide = -1;

var g_layoutLogoCode = '%LogoImage%';

// States of 'standard navigation':
// 0: enabled; 1: disabled; 2: hidden
var g_layoutNavigationControlBar        = %NavigationControlBar%;
var g_layoutNavigationStandardButtons   = %NavigationStandardButtons%;
var g_layoutNavigationTimeLine          = %NavigationTimeLine%;
var g_layoutNavigationTimeDisplay       = %NavigationTimeDisplay%;
var g_layoutNavigationDocumentStructure = %NavigationDocumentStructure%;

var g_slidesOffset = 0;

var isIE = false;

if (document.all)
  isIE = true;

function layout_init()
{
}

function s(id)
{
  if (isNS4)
    return eval('document.' + id);
  else
    return document.getElementById(id).style;
}

function o(id)
{
  if (isNS4)
    return s(id);
  return document.getElementById(id);
}

function d_s(documentName, id)
{
  if (isNS4)
    return eval(documentName + '.document.' + id);
  else
    return eval(documentName + '.document.getElementById("' + id + '").style');
}

function d_o(documentName, id)
{
  if (isNS4)
    return d_s(documentName, id);
  return eval(documentName + '.document.getElementById("' + id + '")');
}

function layout_getSlideForTime(msTime)
{
  var newSlideNr = -1;
  for (var i=0; i<g_thumbCount-1; ++i)
  {
      // alert("checking between " + parent.g_thumbEntries[i].timeStamp + " and " + parent.g_thumbEntries[i+1].timeStamp);
      if (msTime >= g_thumbEntries[i].timeStamp &&
          msTime < g_thumbEntries[i+1].timeStamp)
      {
        newSlideNr = i;
      }
  }
  if (newSlideNr == -1)
  {
    if (msTime < g_thumbEntries[0].timeStamp)
      newSlideNr = 0;
    else
      newSlideNr = g_thumbCount - 1;
  }

  return newSlideNr;
}

function layout_checkDelayedPlaystate()
{
  if (g_wasPlaying && !control_isPlayerPlaying(control_getMasterPlayer()))
    control_play();
}

function layout_onPlayPause()
{
  control_playPause();
  g_wasPlaying = !g_wasPlaying;
}

function layout_onPlay()
{
  control_play();
  g_wasPlaying = true;
}

function layout_onPause()
{
  control_pause();
  g_wasPlaying = false;
}

function layout_onMute(playState)
{
  control_mute();

  if (playState == 'play')
    layout_onPlay();
  else if (playState == 'pause')
    layout_onPause();
  //setTimeout("layout_checkDelayedPlaystate()", 250);
}

function layout_onMuteOn(playState)
{
  control_muteOn();

  if (playState == 'play')
    layout_onPlay();
  else if (playState == 'pause')
    layout_onPause();
  //setTimeout("layout_checkDelayedPlaystate()", 250);
}

function layout_onMuteOff(playState)
{
  control_muteOff();

  if (playState == 'play')
    layout_onPlay();
  else if (playState == 'pause')
    layout_onPause();
  //setTimeout("layout_checkDelayedPlaystate()", 250);
}

function layout_onHome(playState)
{
  control_seekTime(0);

  if (playState == 'play')
    layout_onPlay();
  else if (playState == 'pause')
    layout_onPause();
  setTimeout("layout_checkDelayedPlaystate()", 250);
}

function layout_onBack(playState)
{
  var currentSlide = layout_getCurrentSlide();
  if (currentSlide > 0)
    control_seekTime(g_thumbEntries[currentSlide - 1].timeStamp);
  else
    layout_onHome();

  if (playState == 'play')
    layout_onPlay();
  else if (playState == 'pause')
    layout_onPause();
  setTimeout("layout_checkDelayedPlaystate()", 250);
}

function layout_onEnd(playState)
{
  control_seekTime(g_mediaDurations[0]-1);

  if (playState == 'play')
    layout_onPlay();
  else if (playState == 'pause')
    layout_onPause();
  setTimeout("layout_checkDelayedPlaystate()", 250);
}

function layout_onForward(playState)
{
  var currentSlide = layout_getCurrentSlide();
  if (currentSlide < g_thumbCount - 1)
    control_seekTime(g_thumbEntries[currentSlide + 1].timeStamp);
  else
    layout_onEnd();

  if (playState == 'play')
    layout_onPlay();
  else if (playState == 'pause')
    layout_onPause();
  setTimeout("layout_checkDelayedPlaystate()", 250);
}

function layout_onGotoSlide(slideNumber, playState)
{
  control_seekTime(g_thumbEntries[slideNumber].timeStamp);

  if (playState == 'play')
    layout_onPlay();
  else if (playState == 'pause')
    layout_onPause();
  setTimeout("layout_checkDelayedPlaystate()", 250);
}

function layout_onGotoTargetmark(idTarget, playState)
{
  control_seekTime(g_targetmarkTimes[idTarget]);

  if (playState == 'play')
    layout_onPlay();
  else if (playState == 'pause')
    layout_onPause();
  setTimeout("layout_checkDelayedPlaystate()", 250);
}

function layout_onGotoTimestamp(timeMs, playState)
{
  control_seekTime(timeMs);

  if (playState == 'play')
    layout_onPlay();
  else if (playState == 'pause')
    layout_onPause();
  setTimeout("layout_checkDelayedPlaystate()", 250);
}

function layout_onOpenUrl(url, playState)
{
  window.open(url, "_blank");

  if (playState == 'play')
    layout_onPlay();
  else if (playState == 'pause')
    layout_onPause();
  //setTimeout("layout_checkDelayedPlaystate()", 250);
}

function layout_onOpenFile(filename, playState)
{
  window.open(filename, "_blank");

  if (playState == 'play')
    layout_onPlay();
  else if (playState == 'pause')
    layout_onPause();
  //setTimeout("layout_checkDelayedPlaystate()", 250);
}

function layout_onResetQuestion(pageNumber)
{
  testing_resetQuestion(pageNumber);
}

function layout_onSubmitAnswer(pageNumber)
{
  if (control_isPlaying())
    control_pause();
  testing_submitAnswer(pageNumber);
}

function layout_onResetQuestionnaire(pageNumber)
{
  testing_resetQuestionnaire(pageNumber);
}

function layout_onSubmitTesting(pageNumber)
{
  if (control_isPlaying())
    control_pause();
  testing_submitTesting(pageNumber);
}

function layout_onClose()
{
  top.window.close();
}

function layout_onDoNothing()
{
  return;
}

function layout_getSlide(timeMs)
{
  var slideNr = -1;
  for (var i=0; i<g_thumbCount-1; ++i)
  {
    if ((timeMs >= g_thumbEntries[i].timeStamp &&
        timeMs < g_thumbEntries[i+1].timeStamp) ||
	  (i == 0 && timeMs < g_thumbEntries[i+1].timeStamp))
      slideNr = i;
  }
  if (slideNr == -1)
    slideNr = g_thumbCount-1;
  return slideNr;
}

function layout_getCurrentSlide()
{
  var timeMs = control_getTimeMs();
  return layout_getSlide(timeMs);
}


function layout_onResize()
{
  layout_checkStandardNavigation();
  
  // Resizing mechanism.
  // How much space do we need for the header contents, excluding margins?
  // This is also the width for the media player.
  var headerWidth = 300; // minimum width
  if (g_hasVideo)
  {
    if (g_videoWidth > headerWidth)
      headerWidth = g_videoWidth;
  }
  if (g_hasStillImage)
  {
    if (g_stillImageWidth > headerWidth)
      headerWidth = g_stillImageWidth;
  }

  // How much space do we have horizontally?
  var height;
  if (!isIE)
    height = window.innerHeight - 20;
  else
    height = document.body.offsetHeight - 20;

  // We need 28 pixels for the Media Player status bar
  // Minimum 130 pixels plus margin for the info panels
  var hasLogo = (g_layoutLogoCode != '') ? true : false;
  var logoHeight = hasLogo ? 50 : 0;

  var margin = 9;
  var eonHeaderHeight = 70;
  var descriptionHeight = (o('descriptionDiv').innerHTML != '') ? 30 : 0;

  s('logoDiv').width = headerWidth + 12;
  s('titleDiv').width = headerWidth + 12;
  s('infoDiv').width = headerWidth + 12;
  var titleTop = margin + eonHeaderHeight + (hasLogo ? logoHeight + margin : 0);
  s('titleDiv').top = titleTop;
  s('descriptionDiv').top = titleTop + 25;
  s('infoDiv').top = titleTop + 25 + descriptionHeight;

  var playerTop = titleTop + 50 + 25;
  var playerHeight = 28;
  var playerDelta = 0;
  var playerWidth = 300;
  if (g_hasStillImage)
  {
    playerDelta += g_stillImageHeight;
    playerHeight += g_stillImageHeight;
    playerWidth = headerWidth;
  }
  else if (g_hasVideo)
  {
    playerHeight += g_videoHeight;
    playerWidth = g_videoWidth;
  }

  s('playerDiv').width = headerWidth + 12;
  s('playerDiv').height = playerHeight + 12;
  s('masterPlayerDiv').width = playerWidth;
  if (g_hasStillImage)
  {
    s('stillImageDiv').width = headerWidth;
    s('stillImageDiv').height = g_stillImageHeight;
  }

  g_slidesOffset = headerWidth + 12 + 2*margin; // used in layoutapi.js

  s('eonHeaderDiv').position = 'absolute';
  s('eonHeaderDiv').left = margin;
  s('eonHeaderDiv').top = margin;
  s('eonHeaderDiv').width = g_slidesOffset - margin + g_slidesWidth;

  if (g_layoutNavigationDocumentStructure == 2)
  {
    var width; 
    if (!isIE)
      width = window.innerWidth - 30;
    else
      width = document.body.offsetWidth - 45;

    if ((!g_hasVideo) && (!g_hasStillImage))
    {
//      g_slidesOffset = 10 + 0.5 *(width - g_slidesWidth);
//      if (g_slidesOffset < 10)
//        g_slidesOffset = 10;
//
//      for (i = 0; i <= maxLayerIndex; i++)
//      {
//        var slideEntry = slides_findSlideEntry(i);
//        var SlideAreasStyle = getHtmlObject("", ("SlideareaLayer"+i), ("Slidefield"+i), true, true);
//        SlideAreasStyle.left = g_slidesOffset + g_slideEntries[slideEntry].x;
//      }
    }
    else if (!g_isStandaloneMode)
    {
      if (g_hasVideo)
      {
        s('masterPlayerDiv').top = layout_getSlidesTop() + g_slidesHeight - g_videoHeight;
        s('masterPlayerDiv').left = 10;
      }
      else if (g_hasStillImage)
      {
        s('stillImageDiv').top = layout_getSlidesTop() + g_slidesHeight - g_stillImageHeight;
        s('stillImageDiv').left = 10;
      }
    }
  }

  if (!g_isStandaloneMode)
  {
    var spacerHeight = layout_getSlidesTop() + g_slidesHeight - descriptionHeight - 164;
    if (hasLogo)
      spacerHeight -= (logoHeight + margin);
    if (g_hasVideo)
      spacerHeight -= g_videoHeight;
    else if (g_hasStillImage)
      spacerHeight -= g_stillImageHeight;
      
    if (spacerHeight < 0)
      spacerHeight = 0;

    s('spacerImg').height = spacerHeight;
  }

  for (var i=0; i<g_interactionEntries.length; ++i)
  {
    s(''+ g_interactionEntries[i].strId +'Layer').left = g_interactionEntries[i].x + layout_getSlidesLeft();
    s(''+ g_interactionEntries[i].strId +'Layer').top = g_interactionEntries[i].y + layout_getSlidesTop();
  }
  var protectiveImg = o('protectiveImg');
  if (protectiveImg)
  {
    protectiveImg.width = g_slidesWidth;
    protectiveImg.height = g_slidesHeight;
    s('protectiveLayer').left = layout_getSlidesLeft();
    s('protectiveLayer').top = layout_getSlidesTop();
  }
}

function layout_checkStandardNavigation()
{
  if (g_layoutNavigationControlBar > 0)
  {
    g_layoutNavigationStandardButtons = g_layoutNavigationControlBar;
    g_layoutNavigationTimeLine        = g_layoutNavigationControlBar;
    g_layoutNavigationTimeDisplay     = g_layoutNavigationControlBar;

    if (g_layoutNavigationControlBar == 2)
    {
      if (g_layoutNavigationDocumentStructure == 2)
      {
        // hide the thumbnails and the control bar
        top.document.getElementById("FrameSet").rows = "*, 0, 0";
      }
      else
      {
        // hide the control bar only
        top.document.getElementById("FrameSet").rows = "*, 132, 0";
      }
    }
  }
  
  if (g_layoutNavigationStandardButtons > 0)
  {
    layout_enableControl("play", false);
    layout_enableControl("end", false);
    layout_enableControl("home", false);
    layout_enableControl("back", false);
    layout_enableControl("forward", false);

    if (g_layoutNavigationStandardButtons == 2)
    {
      d_s('parent.control', 'playButtonDiv').visibility ='hidden';
      d_s('parent.control', 'endButtonDiv').visibility ='hidden';
      d_s('parent.control', 'homeButtonDiv').visibility ='hidden';
      d_s('parent.control', 'backButtonDiv').visibility ='hidden';
      d_s('parent.control', 'forwardButtonDiv').visibility ='hidden';
    }
  }
  
  if (g_layoutNavigationTimeLine > 0)
  {
    parent.control.g_layoutTimeSlider.setSliderIcon('images/timeslider_knob_f4.png', 24, 8);
    parent.control.g_layoutTimeSlider.setBackgroundImage('images/trans.gif', 'no-repeat');
    parent.control.g_layoutTimeSlider.setDisabled();

    if (g_layoutNavigationTimeLine == 2)
    {
      if (g_layoutNavigationTimeDisplay == 2)
      {
        // see below
      }
      else
        d_s('parent.control', 'controlleft').backgroundImage = "url(images/controlbar_left_notl.png)";
    }
  }
  
  if (g_layoutNavigationTimeDisplay > 0)
  {
    d_s('parent.control', 'statusAreaDiv').visibility ='hidden';
    d_s('parent.control', 'slidesAreaDiv').visibility ='hidden';

    if (g_layoutNavigationTimeDisplay == 2)
    {
      if (g_layoutNavigationTimeLine == 2)
      {
        d_s('parent.control', 'timeSliderDiv').visibility ='hidden';
        d_s('parent.control', 'controlleft').backgroundImage = "url(images/controlbar_left_notltd.png)";
        parent.control.g_layoutTimeSlider.setSliderIcon('images/trans.gif', 24, 8);
        parent.control.g_layoutTimeSlider.setBackgroundImage('images/trans.gif', 'no-repeat');
      }
      else
        d_s('parent.control', 'controlleft').backgroundImage = "url(images/controlbar_left_notd.png)";
    }
  }
  
  if (g_layoutNavigationDocumentStructure > 0)
  {
    if(g_layoutNavigationDocumentStructure == 2)
    {
      if (g_layoutNavigationControlBar == 2)
      {
        // hide the thumbnails and the control bar
        top.document.getElementById("FrameSet").rows = "*, 0, 0";
      }
      else
      {
        // hide the thumbnails only
        top.document.getElementById("FrameSet").rows = "*, 0, 35";
      }

      for (var i=1; i<top.slides.g_thumbCount+1; ++i)
        d_s('top.slides', ('slideThumb'+i)).visibility ='hidden';
      
      if ((!g_hasVideo) && (!g_hasStillImage)) 
        d_s('parent.main', 'playerDiv').visibility ='hidden';
      if (g_hasVideo)
        d_s('parent.main', 'masterPlayerDiv').height = g_videoHeight + 2;
      if (g_hasStillImage)
        d_s('parent.main', 'stillimageDiv').height = g_stillImageHeight + 2;

//      d_s('parent.main', 'logoDiv').visibility ='hidden';
//      d_s('parent.main', 'titleDiv').visibility ='hidden';
//      d_s('parent.main', 'infoDiv').visibility ='hidden';
//      d_s('parent.main', 'descriptionDiv').visibility ='hidden';
      d_s('parent.main', 'stillImageDiv').visibility ='visible';
      d_s('parent.main', 'masterPlayerDiv').visibility ='visible';

      parent.main.control_hideStatusBar();
    }
  }
}
